__author__ = 'Sergey'
import pygame
from math import floor
import random


class GameObject(pygame.sprite.Sprite):
    """
# Ancestor:
# pygame.sprite.Sprite
#
# Class Variables:
# var image
# default object image
# var screen_rect
# rectangular area on the screen for object
# var x
# coordianate x on the map
# var y
# coordinate y on the map
# var tick
# time counter
# var tile_size
# size of square on the screen
# var map_size
# area available for an object
#
# Functions:
# def init (inm, x, y, tile_size, map_size)
# gives an image to every object
# def set_coord(x, y)
# 7shows coordinates of location
# def game_tick
# one game step, time counter
# def draw(scr)
# create an image of object on the screen
 def __init__(self, img, x, y, tile_size):
#         pygame.sprite.Sprite.__init__(self)
#         if img is not None:
#             self.image = pygame.image.load(img)
#         else:
#             self.image = None
#         self.screen_rect = None
#         self.x = 0
#         self.y = 0
#         self.tick = 0
#         self.set_coord(x, y, tile_size)
#
#     def set_coord(self, x, y, tile_size):
#         self.x = x
#         self.y = y
#         self.screen_rect = pygame.locals.Rect(floor(x) * tile_size, floor(y) * tile_size, tile_size, tile_size)
#
#     def draw(self, scr):
#         if self.image is not None:
#             scr.blit(self.image, (self.screen_rect.x, self.screen_rect.y))
#
#     def game_tick(self):
#         self.tick += 1
# """
    def __init__(self, x, y, img, tile_size):
        pygame.sprite.Sprite.__init__(self)
        self.__x = x
        self.__y = y
        self.__screen_rect = pygame.locals.Rect(floor(x) * tile_size, floor(y) * tile_size, tile_size, tile_size)
        if img is None:
            self.__image = None
        else:
            self.__image = pygame.image.load(img)
        self.set_coord(x, y, tile_size)

    @property
    def x(self):
        return self.__x

    @x.setter
    def x(self, x):
        self.__x = x

    @property
    def y(self):
        return self.__y

    @y.setter
    def y(self, y):
        self.__y = y

    @property
    def image(self):
        return self.__image

    @image.setter
    def image(self, img):
        if img is None:
            self.__image = None
        else:
            self.__image = img

    @property
    def screen_rect(self):
        return self.__screen_rect

    @screen_rect.setter
    def screen_rect(self, rect):
        self.__screen_rect = rect

    def set_coord(self, x, y, tile_size):
        self.x = x
        self.y = y
        self.screen_rect = pygame.locals.Rect(floor(x) * tile_size, floor(y) * tile_size, tile_size, tile_size)

    def draw(self, screen):
        if self.image is not None:
            screen.blit(self.image, (self.screen_rect.x, self.screen_rect.y))

    def game_tick(self):
         self.tick += 1


class Pacman(GameObject):
    """
# Class Pacman
# Has everything that connected with a pacman
#
# Class Varibles:
# var x
# pacman's x coordinate on the map
# var y
# pacman's y coordinate on the map
# var tile_size
# var map_size
# var direction
# direction of movements
# var velocity
# speed
# var health
# amounts of life
# var image
# pacman'image on the screen which depends on the pacman's direction
#
# Functions:
# def init(x, y, tile_size, map_size)
# creates a pacman
# def __get_direction()
# gets the direction
# def __set_direction(d)
# choose the correct pacman's image
# def game_tick()
# that function checks that pacman will not come across the wall and gives special scores when the pacman eats food
"""
    def __init__(self, x, y, tile_size):
        GameObject.__init__(self, x, y, 'C:/Users/Sergey/PycharmProjects/untitled2/Pacman/resources/pacman.png', tile_size)
        self.__direction = 'none'
        self.__velocity = 0.4
        self.__is_alive = True

    @property
    def direction(self):
        return self.__direction

    @direction.setter
    def direction(self, d):
        if ['left', 'right', 'up', 'down', 'none'].count(d):
            self.__direction = d
            if d == 'right':
                self.image = pygame.image.load('C:/Users/Sergey/PycharmProjects/untitled2/Pacman/resources/pacman_right.png')
            elif d == 'down':
                self.image = pygame.image.load('C:/Users/Sergey/PycharmProjects/untitled2/Pacman/resources/pacman_down.png')
            elif d == 'left':
                self.image = pygame.image.load('C:/Users/Sergey/PycharmProjects/untitled2/Pacman/resources/pacman_left.png')
            elif d == 'up':
                self.image = pygame.image.load('C:/Users/Sergey/PycharmProjects/untitled2/Pacman/resources/pacman_up.png')

    @property
    def velocity(self):
        return self.__velocity

    @velocity.setter
    def velocity(self, v):
        self.__velocity = v

    @property
    def is_alive(self):
        return self.__is_alive

    @is_alive.setter
    def is_alive(self, a):
        self.__is_alive = a

    def game_tick(self, m, tile_size):
        x = int(self.x)
        y = int(self.y)
        if self.direction == 'right':
            if (x < m.map_size-1) and (not m.map[y][x+1].is_wall):
                self.x += self.velocity

        elif self.direction == 'down':
            if (y < m.map_size-1) and (not m.map[y+1][x].is_wall):
                self.y += self.velocity

        elif self.direction == 'left':
            if (x > 0) and (not m.map[y][x-1].is_wall):
                self.x -= self.velocity

        elif self.direction == 'up' and (y > 0) and (not m.map[y-1][x].is_wall):
                self.y -= self.velocity

        self.set_coord(self.x, self.y, tile_size)

        if m.map[int(self.y)][int(self.x)].is_food:
            m.map[y][x] = Item('O', x, y, tile_size)
            m.foods -= 1


class Ghost(GameObject):
    """
# Class Ghost
# Has everything that connected with ghosts
#
# Class Varibles:
# var tile_size
# var map_size
# var direction
# direction of movements
# var velocity
# speed
# var health
# amounts of life
# var self.x
# ghost's x coordinate on the map
# var self.y
# ghost's y coordinate on the map
# var pacman.x
# var pacman.y
# var self.tick
# time counter
#
#
# functions:
# def init (x, y, tile_size, map_size)
# creates a ghost at the correct place
# def decide()
# choose a correct ghost's direction in order to catch pacman faster
# def game_tick()
# this function is connected with random ghost's behaviour
"""

    def __init__(self, x, y, tile_size):
        GameObject.__init__(self, x, y, 'C:/Users/Sergey/PycharmProjects/untitled2/Pacman/resources/ghost.png', tile_size)
        self.__direction = 0
        self.__velocity = 0.4

    @property
    def direction(self):
        return self.__direction

    @direction.setter
    def direction(self, d):
        if ['left', 'right', 'up', 'down', 'none'].count(d):
            self.__direction = d

    @property
    def velocity(self):
        return self.__velocity

    def decide(self, pacman, m):
        x, y = int(self.x), int(self.y)
        if x == int(pacman.x) and y == int(pacman.y):
            pacman.health -= 1
        if y == int(pacman.y):
            for X in range(x, m.map_size):
                if m.map[y][X].is_wall:
                    return random.choice(('left', 'up', 'down'))
                if X == int(pacman.x):
                    return 'right'
            for X in reversed(range(x)):
                if m.map[y][X].is_wall:
                    return random.choice(('right', 'down', 'up'))
                if X == int(pacman.x):
                    return 'left'
        if x == int(pacman.x):
            for Y in range(y, m.map_size):
                if m.map[Y][x].is_wall:
                    return random.choice(('right', 'down', 'left'))
                if Y == int(pacman.y):
                    return 'up'
            for Y in reversed(range(y)):
                if m.map[Y][x].is_wall:
                    return random.choice(('up', 'right', 'left'))
                if Y == int(pacman.y):
                    return 'down'
        else:
            return random.choice(('right', 'down', 'up', 'left'))

    def game_tick(self, pacman, m, tile_size):

        choice = self.decide(pacman, m)
        if choice:
            self.direction = choice
        if self.direction == 'right':
            if not m.map[int(self.y)][int(self.x+self.velocity)].is_wall:
                self.x += self.velocity
                if self.x >= m.map_size-1:
                    self.x = m.map_size-1
                    self.direction = random.choice(('left', 'up', 'down'))
        elif self.direction == 'up':
            if not m.map[int(self.y+self.velocity)][int(self.x)].is_wall:
                self.y += self.velocity
                if self.y >= m.map_size-1:
                    self.y = m.map_size-1
                    self.direction = random.choice(('right', 'down', 'left'))
        elif self.direction == 'left':
            if not m.map[int(self.y)][int(self.x-self.velocity)].is_wall:
                self.x -= self.velocity
                if self.x <= 0:
                    self.x = 0
                    self.direction = random.choice(('right', 'down', 'up'))
        elif self.direction == 'down':
            if not m.map[int(self.y-self.velocity)][int(self.x)].is_wall:
                self.y -= self.velocity
                if self.y <= 0:
                    self.y = 0
                    self.direction = random.choice(('up', 'right', 'left'))

        self.set_coord(self.x, self.y, tile_size)

class Item(GameObject):
    """
# Class Item
# This type which represents all Static Objects such as food and walls
#
# Class Varibles:
# var char
# a symbol on a map
# var x
# var y
# var tile_size
# var map_size
# var image
# var isWall
# true if the object is a wall
# var isFood
# true if the objects is food
#
# Functions:
# def init (char, x, y, tile_size, map_size)
# this function pastes the nessesary gameObject and by checking symbols in a txt file
# def game_tick()
# a special time counter
"""
    def __init__(self, char, x, y, tile_size):
        GameObject.__init__(self, x, y, None,  tile_size)
        self.__is_wall = False
        self.__is_food = False

        if char == 'X':
            self.image = pygame.image.load('C:/Users/Sergey/PycharmProjects/untitled2/Pacman/resources/wall.png')
            self.is_wall = True

        if char == 'F':
            self.image = pygame.image.load('C:/Users/Sergey/PycharmProjects/untitled2/Pacman/resources/food.png')
            self.is_food = True

    @property
    def is_wall(self):
        return self.__is_wall

    @is_wall.setter
    def is_wall(self, w):
        self.__is_wall = w

    @property
    def is_food(self):
        return self.__is_food

    @is_food.setter
    def is_food(self, f):
        self.__is_food = f

